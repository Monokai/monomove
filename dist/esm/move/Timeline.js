import e from"./AbstractTimeline.js";import t from"../math/clamp.js";class i extends e{constructor(e,t){super(t),this.tweens=e.reduce(((e,t)=>this.addTween(e,t,this.delay)),[]).sort(((e,t)=>e.delayTime-t.delayTime)),this.totalTime=this.tweens.reduce(((e,t)=>Math.max(e,t.delayTime+t.durationMS)),0)}addTween(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return t instanceof this.constructor?t.tweens.forEach((s=>this.addTween(e,s,i+t.delay))):(i&&(t.delayTime+=1e3*i),e.push(t)),e}setPosition(e){const s=t(e,0,1)*this.totalTime;for(let e=this.tweens.length-1;e>=0;e--){const t=this.tweens[e];if(!(t.delayTime>s))break;t.value=0,i.setTweenVisibility(t,!1),i.setTweenIn(t,!1),t.invalidate(),t.updateAllValues()}for(let e=0;e<this.tweens.length;e++){const a=this.tweens[e],n=a.durationMS,l=a.delayTime+n,o=a.delayTime;if(l<=s)a.value=1,i.setTweenVisibility(a,!0),i.setTweenIn(a,!1);else{if(!(o<=s))break;{const e=t((s-o)/n,0,1);a.value=a.easingFunction(e),i.setTweenVisibility(a,!0),i.setTweenIn(a,!0)}}a.invalidate(),a.updateAllValues()}this.previousPosition=e}update(){this.setPosition(this.previousPosition||0)}async start(){await Promise.all(this.tweens.map((e=>e.start())))}}export{i as default};
